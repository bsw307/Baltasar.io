<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sequoia - Python</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2019-02-12T00:00:00-03:00</updated><entry><title>Cellular automata</title><link href="/automata.html" rel="alternate"></link><published>2019-02-12T00:00:00-03:00</published><updated>2019-02-12T00:00:00-03:00</updated><author><name>baltasar</name></author><id>tag:None,2019-02-12:/automata.html</id><summary type="html">&lt;p&gt;An interactive cellular automata written in javascript&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Generalized cellular automata in two dimensions&lt;/h1&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;This project grew out of my fascination with Conway's "Game of life", which is a particular implementation of a cellular automaton(&lt;em&gt;CA&lt;/em&gt;). The model consists of a grid of cells, each of which can be in one of two states: dead or alive, represented by 0 and 1, respectively. Rules are then applied to see which cells will be dead and which will be alive in the next frame. In the case of the "Game of life", &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules"&gt;four rules&lt;/a&gt; are used.&lt;sup&gt;1&lt;/sup&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any live cell with fewer than two live neighbours dies, as if by underpopulation.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbours lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbours dies, as if by overpopulation.&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These rules can be condensed to &lt;strong&gt;B3/S23&lt;/strong&gt;, meaning dead cells with &lt;strong&gt;3&lt;/strong&gt; neighbours are born, and living cells with &lt;strong&gt;2&lt;/strong&gt; or &lt;strong&gt;3&lt;/strong&gt; neighbours survive. All other cells die.  &lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Cellular automata exhibit many interesting properties, and are studied as discrete systems. Much attention is given to the evolution of specific patterns, and the classification of different &lt;em&gt;CA&lt;/em&gt; based on these patterns.&lt;/p&gt;
&lt;p&gt;In the model below, three types of patterns can be observed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stills&lt;/strong&gt; - Patterns that don't change by themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Oscillators&lt;/strong&gt; - Changing patterns that return to the same shape given enough iterations.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spaceships&lt;/strong&gt; - Oscillating patterns which traverse the cell space.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;p&gt;The program below is written in javascript using the P5.JS library, which enables drawing the cells as well as embedding the file on this page.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;&lt;p style="text-align:center"&gt; &lt;br&gt;
&lt;iframe style="width:400px; height: 500px; overflow: hidden;"  scrolling="no" frameborder="0" src="https://editor.p5js.org/baltasaur/embed/LU5R2vEzw"&gt;&lt;/iframe&gt; 
&lt;/p&gt;&lt;/p&gt;
&lt;!-- ## Sources
&lt;sup&gt;1&lt;/sup&gt; [Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) --&gt;</content><category term="Python"></category><category term="fun with fungi"></category><category term="js"></category><category term="python"></category></entry><entry><title>Hilbert curve</title><link href="/hilbert.html" rel="alternate"></link><published>2019-02-12T00:00:00-03:00</published><updated>2019-02-12T00:00:00-03:00</updated><author><name>baltasar</name></author><id>tag:None,2019-02-12:/hilbert.html</id><summary type="html">&lt;p&gt;Generating Hilbert curves&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Generating Hilbert curves&lt;/h1&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;Hilbert curves are fascinating, space-filling fractals. That means that they can be used to map from 2D to 1D spaces, while preserving nearness. That means that, if two points are close to each other in 2D space, they will be close to each other on the resulting 1D space as well. This gives Hilbert curves immense usefullness in many areas, such as image processing. &lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;This project was mostly inspired by the technical challenge of drawing Hilbert curves.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p style="text-align:center"&gt;   
&lt;iframe style="width:400px; height: 500px; overflow: hidden;"  scrolling="no" frameborder="0" src="https://editor.p5js.org/baltasaur/embed/G7uKADic"&gt;&lt;/iframe&gt; 
&lt;/p&gt;</content><category term="Python"></category><category term="mathematics"></category><category term="physics"></category><category term="computer-science"></category></entry><entry><title>Lindenmayer Systems</title><link href="/lsystem.html" rel="alternate"></link><published>2019-02-12T00:00:00-03:00</published><updated>2019-02-12T00:00:00-03:00</updated><author><name>baltasar</name></author><id>tag:None,2019-02-12:/lsystem.html</id><summary type="html">&lt;p&gt;Various interactive lsystems for p5&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Drawing lindenmayer systems&lt;/h1&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;Lindenmayer systems (l-systems), are rewriting systems predicated on defined rules. A simple example could look as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Constants = &lt;em&gt;A, B&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Rules = (&lt;strong&gt;A-&amp;gt;AB&lt;/strong&gt;),(&lt;strong&gt;B-&amp;gt;BB&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Starting string = A&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We then repeatedly apply these rules to the string, transforming it.&lt;/p&gt;
&lt;p&gt;Iterations&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1: A&lt;/p&gt;
&lt;p&gt;2: AB&lt;/p&gt;
&lt;p&gt;3: ABA&lt;/p&gt;
&lt;p&gt;4: ABAABABA&lt;/p&gt;
&lt;p&gt;5: ABAABABAABAAB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These, seemingly, simple string can in turn be used to model a variety of systems. The example above, for instance, was used by the eponymous Lindenmayer's to model the growth of algae growth patterns. Interestingly enough, the number of letters in each iteration's string corresponds to the Fibonacci sequence.&lt;/p&gt;
&lt;p&gt;To make things more interesting, we can add in more rules and symbols. To model more complex structures, such as plants, we also introduce the use of symbols which correspond to drawing angles.&lt;/p&gt;
&lt;p&gt;At the bottom of this page, three models are available to try out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;System 1: Fractal binary tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This system has four symbols: &lt;strong&gt;1, 0, [, ]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The 1 and 0 both correspond to drawing a line, while [ corresponds to saving the location and turning 45° to the left, and ] to jumping back and turning to the right.&lt;/p&gt;
&lt;p&gt;The rules are as follow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 -&amp;gt; 11&lt;/p&gt;
&lt;p&gt;0 -&amp;gt; 1[0]0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;System 2: Dragon curve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This system has four symbols: &lt;strong&gt;X,Y,F,+,-&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;F corresponds to drawing a line, + corresponds to turning 90° to the left, and - to turning to the right. X and Y serve no purpose in drawing the figure, only in creating the strings.&lt;/p&gt;
&lt;p&gt;The rules are as follow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X -&amp;gt; X+YF+&lt;/p&gt;
&lt;p&gt;Y -&amp;gt; −FX−Y&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;System 3: Fern&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This system has four symbols: &lt;strong&gt;X,F,+,-,[,]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A combination of the previous systems, F corresponds to drawing a line, while + corresponds to turning 25° to the left, and - to turning to the right. [ and ] correspond to saving and returning to a location, respectively. X serves no purpose in drawing the system, only in creating the strings.&lt;/p&gt;
&lt;p&gt;The rules are as follow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X -&amp;gt; F+[[X]-X]-F[-FX]+X&lt;/p&gt;
&lt;p&gt;F -&amp;gt; FF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;L-systems can be used to model many natural phenomena, such as plants and bacteria. They can also be used to generate mathematical fractals, such as the Sierpinski triangle. The aim of this project was to make a program that could display all different types of systems.&lt;/p&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;p&gt;The program was originally written in Python using the Processing library, but has been translated to Javascript and P5.JS for the sake of embedding it on this site.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Click repeatedly on any button to see the development of three types of systems.
&lt;p style="text-align:center"&gt; &lt;br&gt;
&lt;iframe style="width:400px; height: 500px; overflow: hidden;"  scrolling="no" frameborder="0" src="https://editor.p5js.org/baltasaur/embed/Ojb2DqkV"&gt;&lt;/iframe&gt; 
&lt;/p&gt;&lt;/p&gt;</content><category term="Python"></category><category term="natural patterns"></category><category term="js"></category><category term="python"></category></entry></feed>